// Copyright 2009-2020, Scott MacDonald.
#pragma once

#include <stdexcept>
#include <string>
#include <string_view>

namespace Brainfreeze::CommandLineApp
{
    /** Holds information about an exception generated by an underlying platform specific system API. */
    class PlatformException : public std::runtime_error
    {
    public:
        /** Destructor. */
        virtual ~PlatformException();

        /** Get original, unformatted error message. */
        const std::string& originalMessage() const noexcept;

        /** Check if a source file name was provided. */
        bool hasSourceFileName() const noexcept;

        /** Check if a source line number was provided. */
        bool hasSourceLineNumber() const noexcept;

        /** Get the name of the source file that generated the exception. */
        std::string_view sourceFileName() const noexcept;

        /** Get the line number of the source file that generated the exception. */
        int sourceLineNumber() const noexcept;

    protected:
        /** Constructor. */
        PlatformException(
            std::string message,                ///< Human readable error message.
            const char* sourceFileName,         ///< Name of the source code file that generated the exception.
            int sourceLineNumber);              ///< Line number of the source code file that generated the exception.

        /** Creates a better exception message by combining the message with the source file and line number. */
        static std::string format(
            std::string_view message,
            const char* sourceFileName,
            int sourceLineNumber);

    private:
        std::string originalMessage_ = "";
        const char* sourceFileName_ = "";
        int sourceLineNumber_ = 0;
    };
}
